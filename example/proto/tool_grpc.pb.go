// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: tool.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CallbackService_PushProgress_FullMethodName = "/proto.CallbackService/PushProgress"
	CallbackService_PushResult_FullMethodName   = "/proto.CallbackService/PushResult"
)

// CallbackServiceClient is the client API for CallbackService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CallbackServiceClient interface {
	PushProgress(ctx context.Context, in *PushProgressRequest, opts ...grpc.CallOption) (*PushProgressResponse, error)
	PushResult(ctx context.Context, in *PushResultRequest, opts ...grpc.CallOption) (*PushResultResponse, error)
}

type callbackServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCallbackServiceClient(cc grpc.ClientConnInterface) CallbackServiceClient {
	return &callbackServiceClient{cc}
}

func (c *callbackServiceClient) PushProgress(ctx context.Context, in *PushProgressRequest, opts ...grpc.CallOption) (*PushProgressResponse, error) {
	out := new(PushProgressResponse)
	err := c.cc.Invoke(ctx, CallbackService_PushProgress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *callbackServiceClient) PushResult(ctx context.Context, in *PushResultRequest, opts ...grpc.CallOption) (*PushResultResponse, error) {
	out := new(PushResultResponse)
	err := c.cc.Invoke(ctx, CallbackService_PushResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CallbackServiceServer is the server API for CallbackService service.
// All implementations must embed UnimplementedCallbackServiceServer
// for forward compatibility
type CallbackServiceServer interface {
	PushProgress(context.Context, *PushProgressRequest) (*PushProgressResponse, error)
	PushResult(context.Context, *PushResultRequest) (*PushResultResponse, error)
	mustEmbedUnimplementedCallbackServiceServer()
}

// UnimplementedCallbackServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCallbackServiceServer struct {
}

func (UnimplementedCallbackServiceServer) PushProgress(context.Context, *PushProgressRequest) (*PushProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushProgress not implemented")
}
func (UnimplementedCallbackServiceServer) PushResult(context.Context, *PushResultRequest) (*PushResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushResult not implemented")
}
func (UnimplementedCallbackServiceServer) mustEmbedUnimplementedCallbackServiceServer() {}

// UnsafeCallbackServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CallbackServiceServer will
// result in compilation errors.
type UnsafeCallbackServiceServer interface {
	mustEmbedUnimplementedCallbackServiceServer()
}

func RegisterCallbackServiceServer(s grpc.ServiceRegistrar, srv CallbackServiceServer) {
	s.RegisterService(&CallbackService_ServiceDesc, srv)
}

func _CallbackService_PushProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallbackServiceServer).PushProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CallbackService_PushProgress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallbackServiceServer).PushProgress(ctx, req.(*PushProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CallbackService_PushResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallbackServiceServer).PushResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CallbackService_PushResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallbackServiceServer).PushResult(ctx, req.(*PushResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CallbackService_ServiceDesc is the grpc.ServiceDesc for CallbackService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CallbackService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.CallbackService",
	HandlerType: (*CallbackServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PushProgress",
			Handler:    _CallbackService_PushProgress_Handler,
		},
		{
			MethodName: "PushResult",
			Handler:    _CallbackService_PushResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tool.proto",
}
